/*
MODULE NAME: address_seed.js
PURPOSE: Generate beyondcoin addresses using a seed value.
DEPENDENCIES:
    (a) /lib/core/index.js
EXPORTS:
    (a) createBeyondcoinAddressSeedPair(seedValue)
        (a1) Returns a beyondcoin address and the associated WIF,
        (a2) Real example of returned address pair below:
        { address: 'MBeeHGfof2EwNobqyyA5fK6bNRij5CrQAC',
          wif: 'T43wmV2KzF8qmXXvsRGUeBNS1tSFotzy8jCYQHpX1GWUYFzfnXAu',
          publicKey: '02b2687cb1cb5eb05454b6ef3dd835a69a9b9f78585e07d3104ca87b62e869136e'
        }
    (b) createTestBeyondcoinAddressSeedPair(seedValue)
        (b1) Returns a TESTNET beyondcoin address and the associated WIF,
        (b2) Real example of returned address pair below:
        { address: 'QXkngBb93AWdckZK5FnHGXgSYaQASLb4qN',
          wif: 'cSL4NZoBexSFZF4pBZQMDWDHAVKtxyeuSR8v2deJLSuipCtHmG3V',
          publicKey: '02b2687cb1cb5eb05454b6ef3dd835a69a9b9f78585e07d3104ca87b62e869136e'
        }

NOTES:
    (a) The wallet import format (WIF) is an encoded version of
    the private key.
    (b) The Beyondcoin address is generated by hashing the seedValue
    using SHA256.
*/

const beyondcoinjs = require('../lib/core/index.js')
const bigi = require('bigi')

function createBeyondcoinAddressSeedPair (seedValue) {
  return new Promise((resolve, reject) => {
    try {
      if (!seedValue) return reject(new TypeError(`Missing seed value.`))
      const beyondcoinNetwork = beyondcoinjs.networks.beyondcoin

      const hash = beyondcoinjs.crypto.sha256(seedValue)
      const d = bigi.fromBuffer(hash)
      const keyPair = new beyondcoinjs.ECPair(d, undefined, { network: beyondcoinjs.networks.beyondcoin })
      const wif = keyPair.toWIF()

      const pubKeyBuffer = keyPair.getPublicKeyBuffer()
      const publicKey = pubKeyBuffer.toString('hex')

      const redeemScript = beyondcoinjs.script.witnessPubKeyHash.output.encode(beyondcoinjs.crypto.hash160(pubKeyBuffer))
      const scriptPubKey = beyondcoinjs.script.scriptHash.output.encode(beyondcoinjs.crypto.hash160(redeemScript))

      const address = beyondcoinjs.address.fromOutputScript(scriptPubKey, beyondcoinNetwork)
      resolve({ address, wif, publicKey })
    } catch (error) {
      reject(new Error(`ERROR IN [createBeyondcoinAddressSeedPair] MAIN CATCH BLOCK: ${error}`))
    }
  })
}

function createTestBeyondcoinAddressSeedPair (seedValue) {
  return new Promise((resolve, reject) => {
    try {
      if (!seedValue) return reject(new TypeError(`Missing seed value.`))
      const beyondcoinNetwork = beyondcoinjs.networks.testnet

      const hash = beyondcoinjs.crypto.sha256(seedValue)
      const d = bigi.fromBuffer(hash)
      const keyPair = new beyondcoinjs.ECPair(d, undefined, { network: beyondcoinjs.networks.testnet })
      const wif = keyPair.toWIF()

      const pubKeyBuffer = keyPair.getPublicKeyBuffer()
      const publicKey = pubKeyBuffer.toString('hex')

      const redeemScript = beyondcoinjs.script.witnessPubKeyHash.output.encode(beyondcoinjs.crypto.hash160(pubKeyBuffer))
      const scriptPubKey = beyondcoinjs.script.scriptHash.output.encode(beyondcoinjs.crypto.hash160(redeemScript))
      var address = beyondcoinjs.address.fromOutputScript(scriptPubKey, beyondcoinNetwork)

      // Convert address to current SegWit encoding standard
      address = beyondcoinjs.address.toBase58Check(beyondcoinjs.address.fromBase58Check(address)['hash'], 58)
      resolve({ address, wif, publicKey })
    } catch (error) {
      reject(new Error(`ERROR IN [createTestBeyondcoinAddressSeedPair] MAIN CATCH BLOCK: ${error}`))
    }
  })
}

module.exports = {
  createBeyondcoinAddressSeedPair,
  createTestBeyondcoinAddressSeedPair
}
